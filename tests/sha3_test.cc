/**
 * @file    sha3_test.cc
 * @brief   SHA-3 hash functions tests
 * @author  https://github.com/gdaneek
 * @see https://github.com/gdaneek/sha-3
 *
 * @details
 * The values calculated using OpenSSL are used as the answers for verification
 */

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "sha3.hpp"

#include <algorithm>
#include <iostream>

#include "doctest.h"

TEST_CASE("Small message, the size is smaller than the block") {
  std::string s = "Example of small message";

  const uint8_t ans[4][512 >> 3] = {
      {0xad, 0xea, 0x4a, 0xe2, 0xa3, 0x06, 0x90, 0x43, 0xc7, 0xeb, 0x54, 0x20, 0x8e, 0x90,
       0x15, 0xf6, 0x50, 0xba, 0x2f, 0x1a, 0x81, 0x33, 0xff, 0x30, 0xce, 0xda, 0xa6, 0x1b},
      {0xec, 0x8d, 0xd2, 0x9e, 0x02, 0x0f, 0x85, 0x1c, 0xd1, 0xf2, 0xd0, 0x31, 0x90, 0x06, 0xaf, 0xcf,
       0x98, 0x14, 0xc6, 0x11, 0x4a, 0x07, 0x94, 0x57, 0x42, 0x81, 0x26, 0x5d, 0x17, 0x9f, 0x33, 0x7a},
      {0x58, 0x76, 0xdf, 0x02, 0x19, 0x3d, 0x43, 0xc3, 0x78, 0xf3, 0xda, 0x32, 0x6b, 0x4a, 0x0e, 0x6d,
       0x27, 0x5e, 0x28, 0xfa, 0x32, 0x42, 0xec, 0x37, 0x1f, 0x24, 0xae, 0x5d, 0x7a, 0x2e, 0xe4, 0xaa,
       0x82, 0x9a, 0x43, 0xb9, 0x45, 0x05, 0xd9, 0x1a, 0x78, 0x2a, 0x8f, 0x12, 0xa5, 0x40, 0x78, 0x6c},
      {0x01, 0x20, 0x3d, 0xd8, 0x0f, 0xdd, 0x20, 0xfd, 0x45, 0xcf, 0x0a, 0x8b, 0x32, 0xcc, 0x4e, 0x13,
       0x8c, 0xb6, 0x53, 0x03, 0xdb, 0x35, 0x65, 0xf5, 0xb8, 0x30, 0xb5, 0x3b, 0x31, 0x77, 0x84, 0x1e,
       0xb9, 0xea, 0xb8, 0x69, 0x4d, 0x65, 0xc2, 0x97, 0xc5, 0x2b, 0x58, 0x3a, 0x0c, 0x78, 0xbb, 0x8f,
       0x76, 0xe5, 0xd3, 0x7f, 0xc4, 0xbc, 0xbd, 0x3d, 0xa5, 0x4c, 0xbf, 0xe0, 0xfc, 0xca, 0x06, 0x92}};

  uint8_t out[64];

  sha3<224>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 28, std::begin(ans[0])));

  sha3<256>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 32, std::begin(ans[1])));

  sha3<384>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 48, std::begin(ans[2])));

  sha3<512>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 64, std::begin(ans[3])));
}

TEST_CASE("Big message, The size is bigger than a few blocks") {
  std::string s =
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore "
      "magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo "
      "consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
      "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est "
      "laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et "
      "dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea "
      "commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
      "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est "
      "laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et "
      "dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea "
      "commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
      "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est "
      "laborum.";

  const uint8_t ans[4][512 >> 3] = {
      {0x85, 0x62, 0x60, 0xec, 0x23, 0xee, 0x67, 0x77, 0x7a, 0x42, 0xcc, 0x5d, 0x7f, 0xbd,
       0x0d, 0xa5, 0x3f, 0x0b, 0xae, 0xd1, 0xfe, 0x72, 0x89, 0xa0, 0xed, 0x2b, 0x8d, 0x2a},
      {0x09, 0xb5, 0x55, 0x83, 0x44, 0xc8, 0xd3, 0x1a, 0xb1, 0x93, 0x48, 0x26, 0xf7, 0x20, 0x7a, 0x28,
       0x0e, 0x61, 0xa5, 0x78, 0x9f, 0x94, 0xa3, 0x1e, 0x80, 0xc9, 0x49, 0x94, 0x0b, 0x15, 0x55, 0x5e},
      {0x6d, 0x57, 0xb3, 0xda, 0xc9, 0x06, 0x8e, 0xdf, 0x4a, 0xe1, 0xcc, 0x19, 0xef, 0x74, 0xbc, 0x60,
       0xe5, 0x79, 0xf1, 0x51, 0xef, 0x6f, 0xd8, 0x46, 0x60, 0x31, 0x3d, 0xe7, 0x8e, 0xa4, 0xc8, 0x6b,
       0xf9, 0x8b, 0x3f, 0xf2, 0x46, 0x55, 0x1c, 0xaf, 0xb8, 0x53, 0x85, 0x54, 0x22, 0x1c, 0x6f, 0x20},
      {0x87, 0x38, 0x1d, 0x99, 0x6b, 0x4a, 0x6d, 0xf4, 0x4e, 0x9f, 0x37, 0x17, 0x61, 0x5d, 0xfe, 0x65,
       0xae, 0x71, 0x00, 0x2c, 0x60, 0x5b, 0x70, 0x4b, 0x82, 0xb3, 0x23, 0x1e, 0x99, 0xf1, 0x93, 0x3b,
       0x59, 0xfe, 0x50, 0x43, 0x64, 0xaf, 0xee, 0x15, 0x22, 0xaf, 0x67, 0x4f, 0xde, 0xc1, 0x36, 0x45,
       0xc2, 0xa5, 0x42, 0xe1, 0x53, 0xcb, 0xa2, 0x1c, 0xdc, 0x54, 0xe7, 0xb8, 0x66, 0x4b, 0x31, 0x60}};

  uint8_t out[64];

  sha3<224>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 28, std::begin(ans[0])));

  sha3<256>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 32, std::begin(ans[1])));

  sha3<384>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 48, std::begin(ans[2])));

  sha3<512>(out, &s[0], s.size());
  CHECK(std::equal(std::begin(out), std::begin(out) + 64, std::begin(ans[3])));
}
